AWSTemplateFormatVersion: 2010-09-09
Description: Recipes | Creating structured content from published recipes

Parameters:
  Vpc:
    Description: VpcId of your Virtual Private Cloud (VPC)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>
    Default: /account/vpc/default/id
  PublicSubnets:
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Default: /account/vpc/default/public.subnets
  PrivateSubnets:
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Default: /account/vpc/default/private.subnets
  Stack:
    Description: Should never change
    Type: String
    Default: flexible
  App:
    Description: Should never change
    Type: String
    Default: recipes
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - PROD
  AMI:
    Description: AMI ID. Set by RiffRaff on each deploy
    Type: String
  KinesisLoggingStream:
    Description: Name of the ELK logging stream in this account
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/logging.stream
  RecipesTable:
    Description: Name of table to store recipes in.
    Type: String
    Default: recipes_v2
  EditedRecipesTable:
    Description: Name of table to store edited recipes in.
    Type: String
    Default: recipes_v2-edited

Mappings:
  StageVariables:
    PROD:
      MaxInstances: 2
      MinInstances: 0
      InstanceType: t3.small
      Domain: recipes.gutools.co.uk

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !FindInMap [ StageVariables, !Ref Stage, MinInstances ]
      MaxSize: !FindInMap [ StageVariables, !Ref Stage, MaxInstances ]
      TargetGroupARNs:
        - !Ref TargetGroup
        - !Ref PublicTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: true
        - Key: App
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      InstanceType: !FindInMap [ StageVariables, !Ref Stage, InstanceType ]
      IamInstanceProfile: !Ref InstanceProfile
      MetadataOptions:
        HttpTokens: required
      SecurityGroups:
        - !Ref InstanceSecurityGroup
        - !Ref WazuhSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 40
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ev
          mkdir /etc/gu

          cat > /etc/gu/stage <<'EOF'
          ${Stage}
          EOF

          aws --quiet --region ${AWS::Region} s3 cp s3://guconf-flexible/${App}/${Stage}.conf /etc/gu/recipes.conf

          aws --quiet --region ${AWS::Region} s3 cp s3://composer-dist/${Stack}/${Stage}/${App}/${App}.deb /tmp/package.deb
          dpkg -i /tmp/package.deb

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - Fn::ImportValue: guardian-ec2-for-ssm-GuardianEC2ForSSMPolicy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  DescribeEC2Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: describe-ec2-policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: "*"
          Action:
          - ec2:DescribeTags
          - ec2:DescribeInstances
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:DescribeAutoScalingInstances
      Roles:
        - !Ref AppRole
  GetDistributablesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetDistributablesPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - arn:aws:s3:::composer-dist/*
              - !Sub arn:aws:s3:::guconf-flexible/${App}/${Stage}.conf
      Roles:
        - !Ref AppRole

  GetPandaAuthPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetPandaAuthPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - arn:aws:s3:::pan-domain-auth-settings/*public
      Roles:
        - !Ref AppRole

  GetBucketConfigPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetBucketConfigPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - arn:aws:s3:::recipes-dist/*
      Roles:
        - !Ref AppRole

  LoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LoggingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:PutRecord
            Resource: !Ref KinesisLoggingStream
      Roles:
        - !Ref AppRole

  DynamoAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource: !Sub arn:aws:dynamodb:eu-west-1:743583969668:table/${RecipesTable}
      Roles:
        - !Ref AppRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PrivateSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internal
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App
        - Key: Stage
          Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
        - CertificateArn: !Ref CertificateArn
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9000
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /management/healthcheck
      HealthCheckPort: 9000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
    DependsOn:
      - ElasticLoadBalancer

  PublicElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App
        - Key: Stage
          Value: !Ref Stage

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: PublicTargetGroup
      LoadBalancerArn:
        Ref: PublicElasticLoadBalancer
      Certificates:
        - CertificateArn: !Ref CertificateArn
      Port: 443
      Protocol: HTTPS

  PublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9000
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /management/healthcheck
      HealthCheckPort: 9000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
    DependsOn:
      - PublicElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9000
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0

  WazuhSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic from wazuh agent to manager
      VpcId: !Ref Vpc
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 1514
        ToPort: 1515
        CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  CertificateArn:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName: !FindInMap [ StageVariables, !Ref "Stage", Domain ]
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  RecipesDynamoTable:
    DeletionPolicy: Retain
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref RecipesTable
      AttributeDefinitions:
      - AttributeName: uniqueId
        AttributeType: S
      KeySchema:
      - AttributeName: uniqueId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EditedRecipesDynamoTable:
    DeletionPolicy: Retain
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref EditedRecipesTable
      AttributeDefinitions:
      - AttributeName: uniqueId
        AttributeType: S
      KeySchema:
      - AttributeName: uniqueId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
